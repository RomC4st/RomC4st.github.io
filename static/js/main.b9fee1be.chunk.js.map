{"version":3,"sources":["Api.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Api","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getInfo","fetch","then","res","json","result","setState","isLoaded","items","error","state","nom","photo","prenom","onChange","bind","assertThisInitialized","submitForm","e","defineProperty","target","name","value","preventDefault","config","method","headers","Content-Type","body","JSON","stringify","alert","concat","catch","console","_this2","_this$state","react_default","a","createElement","message","className","onSubmit","htmlFor","type","id","required","onClick","componentDidUpdate","keys","map","item","i","key","src","alt","Component","App","logo","src_Api","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.b9fee1be.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Api extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      nom: \"\",\n      photo: \"\",\n      prenom: \"\"\n    };\n    this.onChange = this.onChange.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n  }\n\n  componentDidMount() {\n    this.getInfo();\n  }\n  componentDidUpdate() {\n    this.getInfo();\n  }\n\n  getInfo = () => {\n    fetch(\"https://walkingdeadperso.firebaseio.com/perso.json\")\n      .then(res => res.json())\n      .then(\n        result => {\n          this.setState({\n            isLoaded: true,\n            items: result\n          });\n        },\n\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  };\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  submitForm(e) {\n    e.preventDefault();\n    const config = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        nom: this.state.nom,\n        prenom: this.state.prenom,\n        photo: this.state.photo\n      })\n    };\n\n    const url = \"https://walkingdeadperso.firebaseio.com/perso.json\";\n\n    fetch(url, config)\n      .then(res => res.json())\n      .then(res => {\n        res.error\n          ? alert(res.error)\n          : alert(`Le perso a été ajouté avec l'ID ${res}!`);\n      })\n      .catch(e => {\n        console.error(e);\n        alert(\"Erreur lors de l'ajout d'un perso\");\n      });\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div>\n          <div className=\"FormPerso\">\n            <h1>Ajoutez un Perso de WalkingDead</h1>\n            <form onSubmit={this.submitForm}>\n              <fieldset>\n                <legend>Walking Dead</legend>\n                <div className=\"form-data\">\n                  <label htmlFor=\"nom\">Nom du Perso : </label>\n                  <input\n                    type=\"text\"\n                    id=\"nom\"\n                    name=\"nom\"\n                    onChange={this.onChange}\n                    value={this.state.nom}\n                    required\n                  />\n                </div>\n                <div className=\"form-data\">\n                  <label htmlFor=\"photo\">Image du Perso : </label>\n                  <input\n                    type=\"text\"\n                    id=\"photo\"\n                    name=\"photo\"\n                    onChange={this.onChange}\n                    value={this.state.photo}\n                    required\n                  />\n                </div>\n                <div className=\"form-data\">\n                  <label htmlFor=\"prenom\">Prenom du Perso : </label>\n                  <input\n                    type=\"text\"\n                    id=\"prenom\"\n                    name=\"prenom\"\n                    onChange={this.onChange}\n                    value={this.state.prenom}\n                    required\n                  />\n                </div>\n\n                <hr />\n                <div className=\"form-data\">\n                  <input\n                    type=\"submit\"\n                    value=\"Envoyer\"\n                    onClick={() => this.componentDidUpdate}\n                  />\n                </div>\n              </fieldset>\n            </form>\n          </div>\n          <ul>\n            {Object.keys(items).map((item, i) => (\n              <li key={i}>\n                <p>\n                  {items[item].nom} {items[item].prenom}\n                </p>\n                <img src={items[item].photo} alt={items[item].nom} />\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Api;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Api from \"./Api.js\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <Api />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}